<?php 
	
	$g_sec = permissions::getAuthorizedUser();
	proteus_core::includeAllModules();

	switch($action)
	{
		case "getEntriesWin":
			getEntriesWin($calID);
			break;
			
		case "deleteCalendar":
			deleteCalendar($calID);
			break;
			
		case "saveEntry":
			saveEntry($entryID, $details, $calID);
			break;
			
		case "deleteEntry":
			deleteEntry($entryID);
			break;
			
		case "deleteEntryFile":
			deleteEntryFile($entryID, $fileHash, $salt);
			break;
			
		case "deleteEntryIcon":
			deleteEntryIcon($entryID);
			break;
			
		case "saveCalendar":
			saveCalendar($calID, $details, $cfg);
			break;
			
		case "getEntries":
			getEntries($calID);
			break;
			
		case "getEntryIcon":
			getEntryIcon($entryID);
			break;
			
		case "getEntryFiles":
			getEntryFiles($entryID);
			break;
			
		case "getEntryEdit":
			getEntryEdit($entryID, $calID);
			break;
			
		case "attachFile":			
			attachFile($entryID);
			break;
				
		case "uploadIcon":			
			uploadIcon($entryID);
			break;
		
		case "getCalendarWin":
			getCalendarWin($calID, $typeID, $dataID);
			break;
			
		case "getCalendars":
			getCalendars($typeID, $dataID);
			break;
	}

function getCalendars($typeID, $dataID)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	try
	{		
		validation::ensureInt($typeID, 0);
		validation::ensureInt($dataID, 0);
		
		$writeAccessMun = false;
		$calendars = array();
		
		switch($typeID)
		{
			case customCalendar::calendar_standalone:
				if (!$g_sec->hasAccess(permissions::$manage_calendars, permissions::read) &&
					!$g_sec->is(permissions::$modify_calendar)) $g_sec->security_error_a();
					
					$calendars = customCalendar::getCalendars(customCalendar::calendar_standalone);
				
				break;					
			case customCalendar::calendar_municipal_entity:
				$eObj = new pmm_entity($dataID);
				if (!$eObj->id) throw new Exception("Error, invalid entity specified.");
				
				if (!$g_sec->hasAccess(permissions::$manage_municipal_entities, permissions::read) &&
					!$g_sec->hasAccess(permissions::$municipal_entity, permissions::read, $eObj->id)) $g_sec->security_error_a();
					
				$writeAccessMun = ($g_sec->hasAccess(permissions::$manage_municipal_entities, permissions::write) ||
								   $g_sec->hasAccess(permissions::$municipal_entity, permissions::write, $eObj->id) );
					
				$calendars = customCalendar::getCalendars(customCalendar::calendar_municipal_entity, $dataID);
				
				break;
		}
			
		$t = new tblBuilder('center',0,0,8,'100%');	
		$t->class = "listTable hoverTable";
		
		$r = $t->addRow();	
		
		$r->addHeader(new tblHeader('Title'));
		$r->addHeader(new tblHeader('Entries','','center','',115));		
		$r->addHeader(new tblHeader('Active?','','center','',115));		
		$r->addHeader(new tblHeader('&nbsp;', "", "", "", 80));
			
		foreach($calendars as $calID=>$cal)
		{
			if (!$typeID && (!$g_sec->hasAccess(permissions::$manage_calendars, permissions::read) &&
							 !$g_sec->hasAccess(permissions::$modify_calendar, permissions::read, $cal->id))) continue;			
			
			$count = $d->qryCount("select count(id) from calendarEntry where calendarID = $cal->id");
			
			$mnu = new jqPopupMenu();
			
			$ctl = $mnu->addMenuItem("", "Calendar Settings", "", "ui-icon-wrench");
			$ctl->onclick = "getCalendarWin($cal->id)";			
			
			$ctl = $mnu->addMenuItem("", "Manage Calendar Entries", "", "ui-icon-calendar");
			$ctl->onclick = "getEntriesWin($cal->id)";
			
			if ($writeAccessMun || $g_sec->hasAccess(permissions::$manage_calendars, permissions::delete))
			{		
				$ctl = $mnu->addMenuItem("", "Delete Calendar", "ui-state-error", "ui-icon-trash");
				$ctl->onclick = "deleteCalendar($cal->id)";
			}
			
			$r = $t->addRow();
			
			$r->addCell(new tblCell($cal->title,'evenCell','left'));
			$r->addCell(new tblCell($count,'oddCell','center'));				
			$r->addCell(new tblCell((!$cal->inactive ? "Yes" : "No"),'evenCell','center'));				
			$r->addCell(new tblCell($mnu,'oddCell','center'));
		}	
		
		if (!count($calendars))
		{
			$r = $t->addRow();
			$r->addCell(new tblCell("No Calendars found.", "strong", "center", 4));
		}
		
		$js->content = $t->render();
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();		
	}
	
	echo $js->render();
	exit(0);			
}
function getCalendarWin($calID, $typeID, $dataID)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	try
	{				
		validation::ensureInt($calID, 0);
		validation::ensureInt($typeID, 0);
		validation::ensureInt($dataID, 0);
		
		$calObj = new customCalendar($calID);
		
		if ($calObj->id)
		{	
			$typeID = $calObj->typeID;
			$dataID = $calObj->dataID;
		}
		
		$writeAccess = $calObj->hasAccess($g_sec, permissions::write);
		
		if (!$calObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
		
		$eWin = new jqUI_dialog("calendarEdit", true, 750, "", $calID ? "Modify Calendar" : "Add new Calendar");
		$eWin->setOption("autoOpen", 1);
		$eWin->setOption("autoResize", 1);		
		$eWin->addClass("configWin");
		
		$eWin->addCloseButton($calObj->id ? "Close" : "Cancel");
		
		if ($writeAccess) $eWin->addButton($calID ? "Save Changes" : "Add Calendar", "function() { saveCalendar(); }");		
		
		$txtTitle = new customText("details[title]", validation::prepTextForInput($calObj->title), 25, 25);
		$txtTitle->setLabel("Calendar Title:");
		
		$txtKey = new customText("details[lookupKey]", validation::prepTextForInput($calObj->lookupKey), 10, 50);
		$txtKey->setLabel("Lookup Key:");
		
		$chkInactive = new phpCheckbox("details[inactive]", 1, $calObj->inactive ? true : false);
		$chkInactive->setLabel("Inactive:");
		
		if ($calObj->id)
		{
			$txtISize = new customText("cfg[iconSize]", $calObj->settings->iconSize, 10, 7);
			$txtISize->setLabel("Entry Icon Dimensions:");			
			$txtISize->setRequired("&nbsp; Format: 99x99", "desc");
		}
		
		$cForm = new phpForm("post","calForm");
		$cForm->addControl($txtTitle);
		$cForm->addControl($txtKey);
		
		if ($calID)
		{
			$cForm->addControl($txtISize);
			$cForm->addControl($chkInactive);
		}
		
		$cForm->addControl(new hiddenInput("details[typeID]", $typeID));
		$cForm->addControl(new hiddenInput("details[dataID]", $dataID));
		$cForm->addControl(new hiddenInput("action", "saveCalendar"));
		$cForm->addControl(new hiddenInput("calID", $calObj->id));		
		
		$eWin->addControl($cForm);
		
		$js->addObject("content", $eWin->render(), false);
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();		
	}
	
	echo $js->render();
	exit(0);			
}
function getEntries($calID)
{
	global $config, $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	try
	{
		validation::ensureInt($calID);
		if (!$calID) throw new Exception("Error, no calendar provided!");
		
		$calObj = new customCalendar($calID, false);
		
		if (!$calObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
		
		$writeAccess = $calObj->hasAccess($g_sec, permissions::write);
		
		$t = new tblBuilder('center',0,0,4,'100%');
		$t->class = "listTable hoverTable";
		
		$r = $t->addRow();
		$r->addHeader(new tblHeader("Title"));
		$r->addHeader(new tblHeader("Date / Time"));
		$r->addHeader(new tblHeader("Recurrence"));
		$r->addHeader(new tblHeader("Inactive?"));
		$r->addHeader(new tblHeader("&nbsp;"));
		
		$qry = "select *
				from calendarEntry
				where calendarID=$calID
				order by inactive asc, startDate asc, startTime asc, title asc";
		$eQry = $d->qry($qry);
		
		while($entry = $eQry->fetch_assoc())
		{
			$eObj = new customCalendarEntry($entry["id"]);
			
			$mnu = new jqPopupMenu();
			
			$ctl = $mnu->addMenuItem("", "Edit Calendar Entry", "", "ui-icon-pencil");
			$ctl->onclick = "getEntryEdit({$entry["id"]})";
			
			if ($writeAccess)
			{
				$ctl = $mnu->addMenuItem("", "Delete Calendar Entry", "ui-state-error", "ui-icon-trash");
				$ctl->onclick = "deleteEntry({$entry["id"]})";
			}		
						
			if ($eObj->recurring)
			{
				$recDisp = $eObj->getOccurenceDescription(true);
				$dDisp = $eObj->getOccurenceDescription();
			}
			else
			{
				$recDisp = "none";
				
				$dDisp = "<strong>".validation::parseMySqlDate($entry["startDate"], "D, M d Y")."</strong>";
			}
			
			$endStr = $entry["endTime"] ? "- {$entry["endTime"]}" : "";
			$dDisp .= "<br />{$entry["startTime"]} $endStr";
			
			$iDisp = new phpSpan(($entry["inactive"] ? "<strong class='redColor'>Yes</strong>" : "<span class='greenColor'>No</span>"));			
			
			$r = $t->addRow();
			if ($entry[inactive]) $r->addClass('inactiveRow');
			$r->addCell(new tblCell(validation::prepForDisplay($entry[title]), 'evenCell', 'left'));
			$r->addCell(new tblCell($dDisp, 'oddCell', 'left'));
			$r->addCell(new tblCell($recDisp, 'evenCell', 'left'));
			$r->addCell(new tblCell($iDisp, 'oddCell', 'center'));
			$r->addCell(new tblCell($mnu, 'evenCell', 'center'));
		}
		
		$js->content = $t->render();
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();		
	}
	
	echo $js->render();
	exit(0);
}
function getEntryEdit($entryID, $calID=0)
{
	global $config, $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();	

	try
	{
		
		validation::ensureInt($entryID);
		
		$eObj = new customCalendarEntry($entryID);
		
		if ($eObj->id)
		{			
			$calObj = new customCalendar($eObj->calendarID, false);			
			$calID = $calObj->id;			
		}
		else
		{
			$calObj = new customCalendar($calID, false);			
			if (!$calObj->hasAccess($g_sec, permissions::insert)) $g_sec->security_error_a();
		}
		
		if (!$calObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
		
		$writeAccess = $calObj->hasAccess($g_sec, permissions::write);
		
		$txtTitle = new customText("details[title]", validation::prepTextForInput($eObj->title), 53, 255);
		$txtTitle->setLabel("Entry Title:");		
		
		$txtDesc = new phpTextArea("details[description]", validation::prepTextForInput($eObj->description), 4, 85, "wysiwyg");
		$txtDesc->setLabel("Description:");
				
		$dtCtl = new jqUI_datepicker("details[startDate]", ($entryID ? validation::parseMySqlDate($eObj->startDate, "m-d-Y") : date("m-d-Y")), "Entry Date:", false);
		
		$ddlTime = new phpDDL("details[startTime]");
		$ddlTime->setLabel("Start Time:");			
		$ddlTime->selected = substr($eObj->startTime, 0, -3);
		
		$ddlETime = new phpDDL("details[endTime]");
		$ddlETime->setLabel("End Time:");			
		$ddlETime->selected = substr($eObj->endTime, 0, -3);
		$ddlETime->addListItem(new phpListItem("","")); //allow end time to be optional
		
		for($i = 1; $i <= 12; $i++)
		{
			for($j = 0; $j <= 45; $j+=15)
			{			
				$jDisp = sprintf("%02d", $i).":".sprintf("%02d", $j);
				$ddlTime->addListItem(new phpListItem($jDisp, $jDisp));
				$ddlETime->addListItem(new phpListItem($jDisp, $jDisp));
			}
		}
		
		$ddlTimeAP = new phpDDL("details[startTimeAP]");
		$ddlTimeAP->addListItem(new phpListItem("AM","AM"));
		$ddlTimeAP->addListItem(new phpListItem("PM","PM"));		
		$ddlTimeAP->selected = $entryID ? substr($eObj->startTime, -2) : "PM";		
		
		$ddlETimeAP = new phpDDL("details[endTimeAP]");
		$ddlETimeAP->addListItem(new phpListItem("",""));
		$ddlETimeAP->addListItem(new phpListItem("AM","AM"));
		$ddlETimeAP->addListItem(new phpListItem("PM","PM"));		
		$ddlETimeAP->selected = $entryID ? substr($eObj->endTime, -2) : "";
		
		$rDDL = new phpDDL("details[recurring]");
		$rDDL->setLabel("Recurrence:");		
		$rDDL->addListItem(new phpListItem("",""));
		$rDDL->addListItem(new phpListItem("Weekly, on the same day", 0));
		$rDDL->addListItem(new phpListItem("Monthly, on the same numeric day", 1));
		$rDDL->addListItem(new phpListItem("Monthly, on the same week and day of the week", 2));
		$rDDL->selected = substr($eObj->recurring, 0, 1);
		
		$chkInactive = new phpCheckbox("details[inactive]", 1, $eObj->inactive ? true : false);		
		$chkInactive->setLabel("Inactive:");
		
		$dvIcon = new phpDIV();
		$dvIcon->id = "entryIconDiv";		
		
		$cForm = new phpForm("post","calEntryForm");
		$cForm->addControl($dvIcon);
		$cForm->addControl($txtTitle);
		$cForm->addControl($txtDesc);
		$cForm->addControl($dtCtl);
		$cForm->addControl($ddlTime);
		$cForm->addControl($ddlTimeAP);
		$cForm->addControl($ddlETime);
		$cForm->addControl($ddlETimeAP);
		$cForm->addControl($rDDL);		
		if ($eObj->id) $cForm->addControl($chkInactive);
		$cForm->addControl(new hiddenInput("calID", $calID));
		$cForm->addControl(new hiddenInput("action", "saveEntry"));
		$cForm->addControl(new hiddenInput("entryID", $eObj->id));
			
		$enWin = new jqUI_dialog("entryEditWin", true, 820, "", ($eObj->id ? "Modify a Calendar Entry" : "Add a new Calendar Entry"));
		$enWin->addClass("configWin");
		$enWin->setOption("autoOpen", "true");
		$enWin->setOption("modal",0);
		
		$enWin->addCloseButton($eObj->id ? "Close" : "Cancel");
		
		if ($writeAccess) 
		{
			$enWin->addButton($eObj->id ? "Save Entry" : "Add new Entry", "function() { saveEntry(); }");
		}
		else
		{
			$js->disabled = 1;	
		}
				
		$enWin->addControl($cForm);	
		
		if (!$eObj->id)
		{
			$msg = "<strong>NOTE:</strong> Some editor features (file uploads, image uploads, etc) are unavailable until this calendar 
					entry has been added.<br /><br />
					Please fill out the basic information, then click the add button to enable all editor features.";
			
			$enWin->insertControl(new jqUI_dismissableMessage($g_sec, "new_calendar_entry", $msg));	
		}
		
		$js->calID = $calID;
		$js->addObject("content", $enWin->render(), false);		
	}
	catch(Exception $ex)
	{		
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function deleteEntry($entryID)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	try
	{
		//This does all the checking for us in the classes
		$calObj = customCalendarEntry::getCalendarByEntryID($entryID);
		
		$deleteAccess = false;
		switch($calObj->typeID)
		{
			case customCalendar::calendar_standalone:
				$deleteAccess = ($g_sec->hasAccess(permissions::$manage_calendars, permissions::delete) ||
								 $g_sec->hasAccess(permissions::$modify_calendar, permissions::delete, $calObj->id));
				break;					
				
			case customCalendar::calendar_municipal_entity:
				
				//DELETE PERMISSIONS FOR MUNICIPAL
				$deleteAccess = ($g_sec->hasAccess(permissions::$manage_municipal_entities, permissions::write) ||
								 $g_sec->hasAccess(permissions::$municipal_entity, permissions::write, $calObj->dataID));
						
				break;
		}
		
		if (!$deleteAccess) $g_sec->security_error_a();
		
		$d->qry("delete from calendarEntry where id=$entryID");
		
		pageClass::setNotify("Successfully deleted calendar entry!");		
		
		$js->calID = $calObj->id;
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();				
	}
	
	echo $js->render();	
}
function getEntryFiles($entryID)
{
	global $config, $g_sec;

	$js = new json_a();
	
	try
	{				
		$eObj = new customCalendarEntry($entryID);
		$calObj = new customCalendar($eObj->calendarID);
		$readAccess = false; $writeAccess = false;
		switch($calObj->typeID)
		{
			case customCalendar::calendar_standalone:
				$readAccess = ($g_sec->hasAccess(permissions::$manage_calendars, permissions::read) ||
							  ($eObj->calendarID && $g_sec->hasAccess(permissions::$modify_calendar, permissions::read, $eObj->calendarID)));
							  
				$writeAccess = $g_sec->hasAccess(permissions::$manage_calendars, permissions::write) ||
					   			$eObj->calendarID && $g_sec->hasAccess(permissions::$modify_calendar, permissions::write, $eObj->calendarID);
				break;					
			case customCalendar::calendar_municipal_entity:
				
				$readAccess = ($g_sec->hasAccess(permissions::$manage_municipal_entities, permissions::read) ||
							   $g_sec->hasAccess(permissions::$municipal_entity, permissions::read, $calObj->dataID) );
				
				//SAVE PERMISSIONS FOR MUNICIPAL
				$writeAccess = ( $g_sec->hasAccess(permissions::$manage_municipal_entities, permissions::write) ||
								$g_sec->hasAccess(permissions::$municipal_entity, permissions::write, $calObj->dataID ) );
						
				break;
		}
		if (!$readAccess ) $g_sec->security_error_a();
		
			
		$pc = new pageContent();
		
		$t = new tblBuilder('center',0,0,5,'100%');
		$t->class = 'listTable';
		$t->style = "margin: 10px;";
		
		$r = $t->addRow();
		$r->addHeader(new tblHeader("File"));
		$r->addHeader(new tblHeader("Download Link"));
		$r->addHeader(new tblHeader("File Size"));
		$r->addHeader(new tblHeader("Remove"));
	
		foreach((array)$eObj->files as $f)
		{
			//Hash this so it's not obvious what's happening on the backend						
			$salt = rand();
			$hash = crypt($f[name], $salt);
			
			if ($writeAccess)
			{
				$dCtl = new deleteControl("javascript:deleteEntryFile($entryID, '$hash', $salt)");
				$dCtl->setVerifyMessage("Are you sure you want to delete this associated file? This CANNOT be undone!");
			}
			else
			{
				$dCtl = new phpFiller();	
			}
			
			$lnk = new phpHyperlink($config[scripturl].$f[url], $f[url]);
			
			$r = $t->addRow();
			$r->addCell(new tblCell($f[name], 'evenCell','left'));
			$r->addCell(new tblCell($lnk, 'oddCell','left'));
			$r->addCell(new tblCell(number_format($f[size]/1024, 2)."kb", 'evenCell','center'));
			$r->addCell(new tblCell($dCtl, 'oddCell','center', '', '1%'));
		}
		
		$pc->addControl($t);
		
		if ($writeAccess)
		{
			$btnUpload = new jqUI_button("btnAdd", "Attach File", "floating", "ui-icon-link", true);			
			$btnUpload->style = "display: none;";
			$btnUpload->onclick = "return attachFile($entryID);";			
			
			$fInput = new formInput("fileToUpload",'file');	
			$fInput->onchange = "$('#btnAdd').show();";
			$fInput->setLabel("Attach a new File:","longLabel floating");
			
			$pc->addControl($fInput);
			$pc->addControl($btnUpload);			
		}
		
		$js->content = $pc->render();
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();	
}
function attachFile($entryID)
{
	global $config;

	$js = new json_a();	
	
	try
	{		
		$eObj = new customCalendarEntry($entryID);
		
		$u = new upload($_FILES['fileToUpload'], false);
				
		$baseLoc = $config[baseAppDir]."images/calendars/$eObj->calendarID/$entryID/";
		
		validation::ensureFilename($u->p_Name);
		
		if (!$u->uploadFile($baseLoc)) throw new Exception($u->err);
									
		pageClass::setNotify("Successfully attached file.");
		
		$js->success = 1;
	}
	catch(Exception $ex)
	{
		$js->clear();
		$js->error = $ex->getMessage();
	}		
	
	echo $js->render();	
}
function deleteEntryFile($entryID, $fileHash, $salt)
{
	global $config, $g_sec;
	
	$js = new json_a();
	
	try
	{		
		$eObj = new customCalendarEntry($entryID);
		$calObj = new customCalendar($eObj->calendarID);
		$writeAccess = false;
		switch($calObj->typeID)
		{
			case customCalendar::calendar_standalone:
							  
				$writeAccess = $g_sec->hasAccess(permissions::$manage_calendars, permissions::write) ||
					   		   $g_sec->hasAccess(permissions::$modify_calendar, permissions::write, $eObj->calendarID);
				break;					
			case customCalendar::calendar_municipal_entity:

				//SAVE PERMISSIONS FOR MUNICIPAL
				$writeAccess = ( $g_sec->hasAccess(permissions::$manage_municipal_entities, permissions::write) ||
								 $g_sec->hasAccess(permissions::$municipal_entity, permissions::write, $calObj->dataID ) );
						
				break;
		}
		if (!$writeAccess ) $g_sec->security_error_a();
		
		$found = false;
		
		foreach((array)$eObj->files as $f)
		{
			$hash = crypt($f[name], $salt);
			if ($fileHash == $hash)
			{
				$found = true;
				unlink($config[baseAppDir]."images/calendars/$eObj->calendarID/$entryID/$f[name]");
			}
		}
		
		if (!$found) throw new Exception("Sorry, but that file could not be found. Please try again.");
		pageClass::setNotify("File Deleted");				
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
}
function deleteEntryIcon($entryID)
{
	global $config, $g_sec;
	
	$js = new json_a();
	
	try
	{		
		$eObj = new customCalendarEntry($entryID);
		$calObj = new customCalendar($eObj->calendarID);
		
		if (!$calObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();
		
		$iconObj = $eObj->getIconObject($fLoc);
		
		unlink($fLoc);
		
		pageClass::setNotify("Successfully cleared Entry Icon");		
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
}
function getEntryIcon($entryID)
{
	global $config, $g_sec;
	
	$js = new json_a();
	
	try
	{		
		$eObj = new customCalendarEntry($entryID);
		$calObj = $eObj->getCalendarObject();		
		
		if (!$calObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
				
		$pc = new pageContent();
		
		$btnUpload = new jqUI_button("btnAddIcon", "Upload Icon", "floating", "ui-icon-image", true);
		$btnUpload->style = "display: none;";
		$btnUpload->onclick = "return uploadIcon($entryID);";				
		
		$fInput = new formInput("entryIcon",'file');
		$fInput->addClass('floating');	
		$fInput->onchange = "$('#btnAddIcon').show();";
		$fInput->setLabel("Upload Icon (".$calObj->settings->iconSize."):","longLabel floating");
		
		$img = $eObj->getIconObject($fLoc);
		
		$pc->addControl($img);
		$pc->addControl($fInput);
		$pc->addControl($btnUpload);

		if (file_exists($fLoc))
		{
			$dCtl = new jqUI_button("","Clear Icon", "", "ui-icon-trash", true);
			$dCtl->onclick = "deleteEntryIcon($entryID)";
			
			$pc->addControl($dCtl);
		} 
		
		$js->content = $pc->render();
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();	
}
function uploadIcon($entryID)
{
	global $config, $g_sec;

	$js = new json_a();	
	
	try
	{
		$eObj = new customCalendarEntry($entryID);		
		$calObj = $eObj->getCalendarObject();

		if (!$calObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();		
		
		$dim = $calObj->settings->iconSize;
		$tmp = explode("x",$dim);
		
		if (count($tmp) != 2) throw new Exception("Error, calendar icon dimensions setting is in the wrong format! Please correct and try again.");
		
		$u = new upload($_FILES['entryIcon'], false);
		
		$baseLoc = $config["baseAppDir"]."assets/calendars/{$calObj->id}/$entryID/";		
		
		if (!$u->uploadFile($baseLoc)) throw new Exception($u->err);
		
		$destImg = imagecreatetruecolor($tmp[0], $tmp[1]);
		$fExt = $u->getFileExtension($u->p_Name);
		
		switch($fExt)
		{
			case "jpg":							
			case "jpeg":
				$srcImg = imagecreatefromjpeg($baseLoc.$u->p_Name);
				break;
			case "gif":
				$srcImg = imagecreatefromgif($baseLoc.$u->p_Name);
				break;
			case "png":				
				$srcImg = imagecreatefrompng($baseLoc.$u->p_Name);				
				break;
		}
		
		imagecopyresampled($destImg,$srcImg,0,0,0,0,$tmp[0],$tmp[1],ImageSX($srcImg),ImageSY($srcImg)); 				
		
		//Copy the resampled image to icon.png
		imagepng($destImg, $baseLoc."icon.png");
		
		//Destroy the resource and then unlink the file
		imagedestroy($srcImg);
		imagedestroy($destImg);
		
		unlink($baseLoc.$u->p_Name);
		
		pageClass::setNotify("Entry Icon Successfully Uploaded");
		
		$js->success = 1;
	}
	catch(Exception $ex)
	{
		$js->clear();
		$js->error = $ex->getMessage();
	}		
	
	echo $js->render();	
	exit(0);
}
function saveCalendar($calID, $details, $cfg)
{
	global $config, $g_sec;	
	
	$d = new DAL(true);	
	$js = new json_a();		
	
	try
	{
		if (strlen($details[title]) < 3) throw new Exception("Sorry, but the Calendar Title must be at least 3 characters in length. Please update and try again.");
		if (!$details[inactive]) $details[inactive] = 0;
		
		if ($calID && !preg_match("/^[0-9]{2,3}x[0-9]{2,3}$/is", $cfg["iconSize"])) throw new Exception("Error, icon size is not in the correct format: 99x99");
		
		$calObj = new customCalendar($calID, false);
		
		$cv["title"] = "'{$details["title"]}'";
		$cv["inactive"] = $details["inactive"];
		$cv["lookupKey"] = "'{$details["lookupKey"]}'";
		$cv["addedDateTime"] = "now()";
		
		if (!$calID)		
		{
			// Set these so the hasAccess call below can reference them
			$calObj->typeID = $details["typeID"];
			$calObj->dataID = $details["dataID"];
			
			if (!$calObj->hasAccess($g_sec, permissions::insert)) $g_sec->security_error_a();
			
			$cv["typeID"] = $details["typeID"];
			$cv["dataID"] = $details["dataID"];
			
			$calID = $d->qryInsertByArray("calendars", $cv);
			if (!$calID) throw new Exception("Error saving Calendar. Please try again or notify an admin if the problem persists.");
			
			$calObj = new customCalendar($calID, false);
			
			$baseLoc = $config["baseAppDir"]."assets/calendars/{$calObj->id}/";
			@mkdir($baseLoc);
			
			pageClass::setNotify("Successfully added Calendar!");
			
			$js->calID = $calObj->id;			
		}
		else
		{	
			if (!$calObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();
			
			$d->qryUpdateByArray("calendars", $cv, "id=$calID");

			pageClass::setNotify("Successfully modified Calendar!");
		}
		
		$js->typeID = $calObj->typeID;
		$js->dataID = $calObj->dataID;
		
		if ($cfg["iconSize"]) $calObj->settings->iconSize = $cfg["iconSize"];
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}	
	
	echo $js->render();
	exit();
}
function saveEntry($entryID, $details, $calID)
{
	global $g_sec, $config;
	
	$d = new DAL(true);	
	$js = new json_a();
	

	try
	{		
		validation::ensureInt($entryID);
		
		$eObj = new customCalendarEntry($entryID);		
		
		if ($eObj->id)
		{
			$calObj = $eObj->getCalendarObject(false);
			
			if (!$calObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();
		}
		else
		{
			$calObj = new customCalendar($calID);
			if (!$calObj->id) throw new Exception("Error, no calendar found!");
			
			if (!$calObj->hasAccess($g_sec, permissions::insert)) $g_sec->security_error_a();
		}
		
		$startDate = validation::convertToMySqlDate($details[startDate]);
		$ts = validation::convertToUnixTimestamp($startDate);
		
		switch($details[recurring])
		{
			case "";
				$idx = 0;
				break;
			case 0:
				$idx = date("w", $ts);
				break;
			case 1:
				$idx = date("d", $ts);
				break;
			case 2:
				$idx = date("w", $ts);
				break;		
		}		
		
		$details["title"] = trim($details["title"]);		
		if (strlen($details["title"]) < 3) throw new Exception("Sorry, calendar entry titles must be at least 3 characters.");
		
		$details["description"] = validation::prepMultiLineForStorage($details["description"]);
		
		
		$eObj->title = "'{$details["title"]}'";
		$eObj->description = "'{$details["description"]}'";
		$eObj->startDate = "'$startDate'";
		$eObj->startTime = "'{$details["startTime"]} {$details["startTimeAP"]}'";
		$eObj->endTime = $details["endTime"] ? "'{$details["endTime"]} {$details["endTimeAP"]}'" : "''";
		$eObj->recurring = ($idx ? "'{$details["recurring"]}::$idx'" : "''");		
		
		if (!$eObj->id)
		{
			$eObj->calendarID = $calObj->id;
			$eObj->addedDateTime = "now()";
			
			$entryID = $eObj->insert();
			
			$baseLoc = $config["baseAppDir"]."assets/calendars/{$calObj->id}/$entryID/";
			@mkdir($baseLoc);
			
			pageClass::setNotify("Successfully added new calendar entry!");
			
			$eObj = new customCalendarEntry($entryID);
		}
		else
		{
			$eObj->inactive = $details["inactive"];
			$eObj->save();
			
			pageClass::setNotify("Successfully modified calendar entry!");
		}
		
		//if the next occurence of this day is greater than the number of days in the month, then it is last
		$is_last = (date("d", $ts) + 7) > cal_days_in_month(CAL_GREGORIAN, date("m", $ts), date("Y", $ts));
		$ordinal = $eObj->getOrdinal();
		
		$eObj->recurringWOM = $is_last ? "'L'" : "'$ordinal'";
		$eObj->save();		
		
		$js->calID = $calObj->id;
		$js->entryID = $entryID;
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();		
	}
	
	echo $js->render();
	exit(0);
}
function deleteCalendar($calID)
{
	global $g_sec;
	
	$d = new DAL(true);	
	$js = new json_a();
	

	try
	{	
		$calObj = new customCalendar($calID);
		
		if (!$calObj->hasAccess($g_sec, permissions::delete)) $g_sec->security_error_a();		
			
		$d->qry("delete from calendarEntry where calendarID=$calID");
		$d->qry("delete from calendars where id=$calID");
	
		pageClass::setNotify("Successfully removed calendar and all related events.");
		
		$js->typeID = $calObj->typeID;
		$js->dataID = $calObj->dataID;
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();		
	}
	
	echo $js->render();
	exit(0);
}
function getEntriesWin($calID)
{
	global $config, $g_sec;
	
	$js = new json_a();
	
	try
	{
		validation::ensureInt($calID);
		if (!$calID) throw new Exception("Error, no calendar provided!");
		
		$calObj = new customCalendar($calID, false);
		
		if (!$calObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
		
		$eWin = new jqUI_dialog("entriesWin", true, 750, "", "Calendar Entries: ".$calObj->title);
		$eWin->setOption("autoOpen", 1);
		$eWin->fitToViewport();
		
		$eWin->addCloseButton("Close");
		
		if ($calObj->hasAccess($g_sec, permissions::write))
		{
			$eWin->addButton("New Calendar Entry", "function() { getEntryEdit(0, $calObj->id); }");
		}
		
		$js->content = $eWin->render();		
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();		
	}
	
	echo $js->render();
	exit(0);
}
?>

<?php
	$g_sec = permissions::getAuthorizedUser();
	
	proteus_core::includeAllModules();
	 
	switch($action)
	{
		case "assetUpload":
			assetUpload($dataID, $typeID, $contentID, $isFile);
			break;
			
		case "deleteContentEntry":
			deleteContentEntry($contentID);
			break;
			
		case "updateContentEntry":
			updateContentEntry($contentID, $content, $dataID, $typeID);
			break;
			
		case "getContentWin":
			getContentWin($contentID, $dataID, $typeID);
			break;
			
		case "getContentEntries":
			getContentEntries($typeID, $dataID);
			break;	
	}
	
function getContentEntries($typeID, $dataID)
{
	global $g_sec;

	$d = new DAL(true);
	
	$js = new json_a();
	$pc = new pageContent();
	
	try
	{
		validation::ensureInt($typeID);
		validation::ensureInt($dataID);
		
		if (!customContent_core::checkPermission($g_sec, $typeID, $dataID, permissions::read)) $g_sec->security_error_a();
		
		$deleteAccess = customContent_core::checkPermission($g_sec, $typeID, $dataID, permissions::delete, permissions::delete);
		$writeAccess = customContent_core::checkPermission($g_sec, $typeID, $dataID, permissions::write);
		$insertAccess = customContent_core::checkPermission($g_sec, $typeID, $dataID, permissions::write, permissions::insert);		
		
		switch($typeID)
		{
			case proteus_core::$module_customContent["siteType"]:
				if ($dataID) throw new Exception("Invalid arguments supplied.");
				$title = "Modify Custom Content";
				break;
						
			case proteus_core::$module_municipal["siteType"]:				
				$title = "Modify Custom Entity Content";
				break;
				
			default:
				throw new Exception("Error, unsupported custom content type!");
		}		
		
		if ($insertAccess && $typeID <> proteus_core::$module_customContent["siteType"])
		{	
			$cmdAdd = new jqUI_button('btnNewContent','Add New', "addNewContent", "ui-icon-document", true);
			$cmdAdd->onclick = "getContentWin(0, $dataID, $typeID)";		
			
			$pc->addControl($cmdAdd);
		}		
		
		$t = new tblBuilder('center',0,0,4,'100%');	
		$t->class = "listTable hoverTable";	
		$t->addAttribute("data-sort-type", tableSorter_core::$sort_content_page["sortType"]);
		
		if ($writeAccess) $t->addClass('sortable');	
		
		$r = $t->addRow();
	
		$r->addHeader(new tblHeader('Caption'));
		$r->addHeader(new tblHeader('Content Name'));	
		$r->addHeader(new tblHeader('&nbsp;'));
		
		$qry = "select *
				from customContent
				where typeID=$typeID and dataID=$dataID
				order by position asc";
		$iQry = $d->qry($qry);	
	
		$ct = 0;
		while($content = $iQry->fetch_assoc())
		{		
			$eCtl = new editControl();
			$eCtl->onclick = "getContentWin($content[id])";		
		
			if ($deleteAccess)
			{
				$dCtl = new deleteControl();
				$dCtl->onclick = "deleteContentEntry($content[id])";				
			}
			else
			{
				$dCtl = new phpFiller();	
			}		
		
			$r = $t->addRow();
			$r->addAttribute("data-id", $content[id]);
		
			$r->addCell(new tblCell(validation::prepForDisplay($content[caption], false),'evenCell','left'));
			$r->addCell(new tblCell(validation::prepForDisplay($content[pageName], false),'evenCell','left'));				
			$r->addCell(new tblCell(array($eCtl, $dCtl),"evenCell","center"));
			
			$ct++;
		}		
	
		if (!$ct)
		{
			$r = $t->addRow();
			$r->addCell(new tblCell("There are no content pages associated yet.", "bold", "center", 3));
		}
		
		$pc->addControl($t);		
		
		$js->content = $pc->render();
	}	
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);	
}
function getContentWin($contentID, $dataID, $typeID)
{
	global $g_sec;

	$js = new json_a();
	
	try
	{	
		validation::ensureInt($dataID);
		validation::ensureInt($typeID);
		
		$cpObj = new customContentData($contentID);
		
		if (!$cpObj->id)
		{
			if (!customContent_core::checkPermission($g_sec, $typeID, $dataID, permissions::write, permissions::insert)) $g_sec->security_error_a();						
		}		
		else
		{
			if (!customContent_core::checkPermission($g_sec, $cpObj->typeID, $cpObj->dataID, permissions::read)) $g_sec->security_error_a();
			
			$dataID = $cpObj->dataID;
			$typeID = $cpObj->typeID;
		}
		
		$dataObj = customContentData::getDataObject($typeID, $dataID, $cpObj->id, $g_sec);
		$uploadType = $dataObj->module["siteType"];
		
		$writeAccess = customContent_core::checkPermission($g_sec, $typeID, $dataID, permissions::write);		
		
		$cWin = new jqUI_dialog("contentWin", true, 875, "", "Modify Custom Content");
		$cWin->addClass("configWin");
		$cWin->setOption("autoOpen", true);	
		$cWin->setOption("modal", 0);
				
		$cWin->fitToViewport();	
		
		$cWin->addCloseButton();
		
		if ($writeAccess)
		{			
			$cWin->addButton("Save Content", "updateContentEntry");
		}		
		else
		{
			$js->disabled = 1;
		}
		
		$txtCaption = new customText("content[caption]",validation::prepTextForInput($cpObj->caption),50, 255);	
		$txtCaption->setLabel("Caption: ");					
	
		$txtTitle = new customText("content[pageName]",validation::prepTextForInput($cpObj->pageName),25, 255);	
		$txtTitle->setLabel("Content Name: ");			
	
		$txtDesc = new phpTextArea("content[pageData]", validation::prepTextForInput($cpObj->pageData), 23, 113, "wysiwyg");		
	
		$aForm = new phpForm("post", "contentForm");	
		$aForm->addControl($txtCaption);
		$aForm->addControl($txtTitle);		
		$aForm->addControl($txtDesc);
		$aForm->addControl(new hiddenInput("action", "updateContentEntry"));
		$aForm->addControl(new hiddenInput("contentID", $cpObj->id));
		$aForm->addControl(new hiddenInput("dataID", $dataID));
		$aForm->addControl(new hiddenInput("typeID", $typeID));
		
		$cWin->addControl($aForm);
		
		if ($cpObj->updatedUserID)
		{
			$sec = new security($cpObj->updatedUserID);
			$cWin->addControl(new phpParagraph("Content last modified by {$sec->login} on ".validation::parseMySqlDate($cpObj->updatedDateTime, "D, M d Y \a\\t h:ia"), "updated"));	
		}		
		
		if (!$cpObj->id)
		{
			$msg = "<strong>NOTE:</strong> Some editor features (file uploads, image uploads, etc) are unavailable until the content 
					entry has been added.<br /><br />
					Please fill out the basic information, then click the add button to enable all editor features.";
			
			$cWin->insertControl(new jqUI_dismissableMessage($g_sec, "new_custom_content_entry", $msg));	
		}
		
		$js->dataID = $dataObj->id;
		$js->uploadType = $uploadType;
		$js->content = $cWin->render();
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function updateContentEntry($contentID, $content, $dataID, $typeID)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	try
	{	
		validation::ensureInt($dataID);
		validation::ensureInt($typeID);
		
		$cpObj = new customContentData($contentID);
		
		if (!$cpObj->id)
		{
			if (!customContent_core::checkPermission($g_sec, $typeID, $dataID, premissions::write, permissions::insert)) $g_sec->security_error_a();						
		}		
		else
		{
			if (!customContent_core::checkPermission($g_sec, $cpObj->typeID, $cpObj->dataID, permissions::write)) $g_sec->security_error_a();
			
			$dataID = $cpObj->dataID;
			$typeID = $cpObj->typeID;
		}		
		
		if (strlen($content["pageName"]) < 3) throw new Exception("Content Name must be at least 3 characters!");
		
		$content["pageName"] = str_replace(" ", "_", $content["pageName"]);
		
		//Strip out unwanted characters
		$content["pageName"] = strtolower(preg_replace("/[^a-zA-Z0-9_]/", "", $content["pageName"]));
		$content["caption"] = preg_replace("/[^a-zA-Z0-9_\-\:\[\]\s\&]/", "", $content["caption"]);
	
		if ($d->qryCount("select id from customContent where pageName='{$content["pageName"]}' and dataID=$dataID and typeID=$typeID".($contentID ? " and id <> $contentID" : "")))
		{
			throw new Exception("Sorry, but there is already a custom content entry with that content name. Please choose another name and try again.");
		}
		
		$content["pageData"] = validation::prepMultiLineForStorage($content["pageData"]);
		
		foreach((array)$content as $key=>$value)
		{
			$cpObj->$key = "'$value'";
		}		
		
		$cpObj->updatedDateTime = "now()";
		$cpObj->updatedUserID = $g_sec->id;
		
		if ($contentID)
		{
			$cpObj->save();		
			pageClass::setNotify("Content Page successfully updated");		
		}
		else
		{			
			
			$cpObj->dataID = $dataID;
			$cpObj->typeID = $typeID;			
			
			$cpObj->insert();			
			
			pageClass::setNotify("Content Page successfully inserted");
			
			$js->contentID = $contentID;
		}
		
		$js->typeID = $typeID;
		$js->dataID = $dataID;
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);		
}
function deleteContentEntry($contentID)
{
	global $config, $g_sec;

	$d = new DAL(true);
	$js = new json_a();
	
	try
	{
		$cpObj = new customContentData($contentID);

		if (!customContent_core::checkPermission($g_sec, $cpObj->typeID, $cpObj->dataID, permissions::delete, permissions::delete)) $g_sec->security_error_a();
		
		$dataObj = customContentData::getDataObject($cpObj->typeID, $cpObj->dataID, $contentID);
		if (!$dataObj->id) throw new Exception("Error, linked data not found.");
		
		$assetDir = $config["baseAppDir"]."assets/".$dataObj->assetDir;
		
		foreach(glob($assetDir."/*") as $file)
		{
			@unlink($file);
		}
		
		@rmdir($assetDir);
		
		$d->qry("delete from customContent where id=$contentID");
		
		pageClass::setNotify("Successfully removed custom content");
		
		$js->typeID = $cpObj->typeID;
		$js->dataID = $cpObj->dataID;
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function assetUpload($dataID, $typeID, $contentID, $isFile)
{
	global $config, $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	try
	{			
		if (!$typeID) throw new Exception("Error, missing upload data. Please refresh the page and try again.");
		
		$dataObj = customContentData::getDataObject($typeID, $dataID, $contentID, $g_sec);
		if (!$dataObj->id) throw new Exception("Error, no linked data found.");
		
		$imgDir = $dataObj->assetDir;
		
		$dir = $config["baseAppDir"].$imgDir;
		
		if (!is_dir($dir)) mkdir($dir, 0770, true);
		
		$uploadedFile = '';	
		
		$isImage = $isFile ? false : true;
		
		//Grab first entry in the files array
		$upload = new upload(current($_FILES), false);

		if (!$isFile)
		{		
			$ext = $upload->getFileExtensionByMIME($upload->p_TmpName);		
					
			switch($ext)
			{			
				case "jpg":
				case "jpeg":
					$base = imagecreatefromjpeg($upload->p_TmpName);
					break;
				case "gif":
					$base = imagecreatefromgif($upload->p_TmpName);
					break;
				case "png":
					$base = imagecreatefrompng($upload->p_TmpName);
					break;					
				default:
					$isImage = false;	
					break;
			}
			
			if (!$base) throw new Exception("Could not create image from uploaded file. Please try again.");
		}		

		$fPath = "$dir/".$upload->p_Name;		
		$retVal = $upload->uploadFile($fPath, ($isImage ? array("jpg","gif","jpeg","png") : array()));
	
		if ($upload->err) throw new Exception($upload->err);
		
		if ($isImage)
		{
			$oWidth = imagesx($base);
			$oHeight = imagesy($base);
			
			$nWidth = $oWidth;
			$nHeight = $oHeight;
			
			$ratio = $oHeight > $oWidth ? $oWidth / $oHeight : $oHeight / $oWidth;
			
			if ($oWidth > $config["uploaded_image_max_width"])
			{
				//$ratio = $oHeight / $oWidth;
				
				$nWidth = $config["uploaded_image_max_width"];
				$nHeight = $ratio * $nWidth;				
			}		
			
			if ($nHeight > $config["uploaded_image_max_height"])
			{
				//$ratio = $oWidth / $oHeight;
				
				$nHeight = $config["uploaded_image_max_height"];
				$nWidth = $ratio * $nHeight;				
			}		
			
			//Create the new image
			$dest = imagecreatetruecolor($nWidth, $nHeight);
			
			// Attempt to retain transparency
			imagealphablending($base, true);					
			imagealphablending($dest, false);
			imagesavealpha($dest, true);
			
			imagecopyresampled($dest, $base, 0,0,0,0,$nWidth, $nHeight, $oWidth, $oHeight);			
			
			//In case the mime type and file extension are different			
			$excludeExt = ".".$upload->getFileExtension($upload->p_Name);
	
			//Append the current timestamp to the file (for lookups and for overwrite prevention)
			$newFile = "support_".basename($upload->p_Name, $excludeExt)."_".time().".$ext";			
			
			switch($ext)
			{			
				case "jpg":
				case "jpeg":
					imagejpeg($dest, "$dir/$newFile", $config["uploaded_image_quality_jpg"]);
					break;
				case "gif":
					imagegif($dest, "$dir/$newFile");					
					break;
				case "png":
					imagepng($dest, "$dir/$newFile", $config["uploaded_image_quality_png"]);					
					break;
			}			
			
			imagedestroy($dest);
			imagedestroy($base);			
			
			//Unlink the original uploaded file
			unlink($fPath);

			$uploadedFile = "$imgDir/$newFile";
			$js->image = $js->filelink = stripslashes($uploadedFile);
		}
		else
		{		
			$js->caption = $js->filename = stripslashes($upload->p_Name);
			$js->file = $js->filelink = stripslashes($imgDir."/".$upload->p_Name);	
		}		
	}
	catch(Exception $ex)
	{
		$msg = $ex->getMessage();
		
		error_log($msg);
		
		$js->error = $msg;
	}
	
	echo $js->render();
	exit(0);
}
?>
<?php 
	$g_sec = permissions::authenticateAjax(true);

	// Grab all the included modules so we can have model support in utility functions
	proteus_core::includeAllModules();

	switch($action)
	{
		default:
			uploadSupportImage($dataID, $typeID, $isFile);
			break;
	}
	
function uploadSupportImage($dataID, $typeID, $isFile)
{
	global $config;

	$d = new DAL(true);
	$js = new json_a();

	try
	{
		if (!$dataID && $typeID != 5 && $typeID != 2) throw new Exception("Error, no ID provided. This can be caused by attempting to add files to an entry that has not yet been saved. Please save your work and try again.");
		if (!$typeID) throw new Exception("Error, missing upload data. Please refresh the page and try again.");

		switch($typeID)
		{
			case 1:
				/* $data = new categoryItem($dataID);
				 $imgDir = "images/categoryItems/$dataID"; */
				break;

			case 2:
				//Inline Edit images
				//$imgDir = "images/contentPages";
				break;
					
			case 3:
				// Blog Entries
				/* $entry = new customBlogEntry($dataID);
				 $imgDir = "images/blogs/$dataID"; */
				break;

			case 4:
				// Custom Forms (description)
				//$imgDir = "images/forms/$dataID";
				break;

			case 5:
				// Custom Content Pages
				//$imgDir = "images/contentPages";
				break;

			case 6:
				// PMM - entities, faq, etc.
				$imgDir = "images/pmm_entities/$dataID";
				break;
					
			case 7:
				// Calendar Entries
				//$imgDir = "images/calendars/$dataID";
				break;

			default:
				throw new Exception("Invalid upload type specified!");
		}

		$dir = $config["baseAppDir"].$imgDir;

		if (!is_dir($dir)) mkdir($dir, 0770, true);

		$uploadedFile = '';

		$isImage = $isFile ? false : true;

		//Grab first entry in the files array
		$upload = new upload(current($_FILES), false);

		$ext = $upload->getFileExtensionByMIME($upload->p_TmpName);

		switch($ext)
		{
			case "bmp":
				$base = imagecreatefrombmp($upload->p_TmpName);
				break;
			case "jpg":
			case "jpeg":
				$base = imagecreatefromjpeg($upload->p_TmpName);
				break;
			case "gif":
				$base = imagecreatefromgif($upload->p_TmpName);
				break;
			case "png":
				$base = imagecreatefrompng($upload->p_TmpName);
				break;
			default:
				$isImage = false;
				break;
		}

		if (!$base && $isImage) throw new Exception("Could not create image from uploaded file. Please try again.");

		$fPath = "$dir/".$upload->p_Name;
		$retVal = $upload->uploadFile($fPath, ($isImage ? array("jpg","gif","jpeg","png","bmp") : array()));

		if ($upload->err) throw new Exception($upload->err);

		if ($isImage)
		{
			$oWidth = imagesx($base);
			$oHeight = imagesy($base);

			if ($oWidth > 465)
			{
				$ratio = $oHeight / $oWidth;

				$nWidth = 465;
				$nHeight = $ratio*465;
			}
			else
			{
				$nWidth = $oWidth;
				$nHeight = $oHeight;
			}

			//Create the new image
			$dest = imagecreatetruecolor($nWidth, $nHeight);
			imagecopyresampled($dest, $base, 0,0,0,0,$nWidth, $nHeight, $oWidth, $oHeight);

			//In case the mime type and file extension are different
			$ext = ".".$upload->getFileExtension($upload->p_Name);

			//Append the current timestamp to the file (for lookups and for overwrite prevention)
			$newFile = "support_".basename($upload->p_Name, $ext)."_".time().".jpg";

			if (!imagejpeg($dest, "$dir/$newFile", 95))
			{
				throw new Exception("Unable to create JPG from uploaded image", -1);
			}

			imagedestroy($dest);
			imagedestroy($base);

			//Unlink the original uploaded file
			unlink($fPath);

			$uploadedFile = "$imgDir/$newFile";
			$js->image = $js->filelink = stripslashes($uploadedFile);
		}
		else
		{
			$js->caption = $js->filename = stripslashes($upload->p_Name);
			$js->file = $js->filelink = stripslashes($imgDir."/".$upload->p_Name);
		}
	}
	catch(Exception $ex)
	{
		$msg = $ex->getMessage();

		error_log($msg);

		$js->error = $msg;
	}

	echo $js->render();
	exit(0);
}
?>
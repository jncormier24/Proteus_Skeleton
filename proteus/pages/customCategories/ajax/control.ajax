<?php 
	$g_sec = permissions::getAuthorizedUser();
	
	proteus_core::includeAllModules();
	
	switch($action)
	{
		case "removeFeatureFile":
			removeFeatureFile($dataID, $indexID);
			break;
		
		case "updateFileCaption":
			updateFileCaption($dataID, $indexID, $caption);
			break;
			
		case "uploadFeatureFile":
			uploadFeatureFile($featureID, $itemID);
			break;
			
		case "getFeatureFiles":
			getFeatureFiles($featureID, $itemID);
			break;
			
		case "getFeatureContextMenu":
			getFeatureContextMenu($featureID, $dataID);
			break;
			
		case "clearFeatureImage":
			clearFeatureImage($dataID);
			break;
			
		case "uploadFeatureImage":
			uploadFeatureImage($featureID, $itemID);
			break;
			
		case "getFeatureImage":
			getFeatureImage($featureID, $itemID);
			break;
			
		case "updateCategoryItem":
			updateCategoryItem($itemID, $categoryID, $item);
			break;
			
		case "getCategoryItemEdit":
			getCategoryItemEdit($itemID, $categoryID);
			break;
			
		case "getCategoryItemsWin":
			getCategoryItemsWin($categoryID);
			break;
			
		case "getCategoryItems":
			getCategoryItems($categoryID, $paging, $sortData, $filterColumns, $customColumns);
			break;
			
		case "deleteCategory":
			deleteCategory($categoryID);
			break;
			
		case "toggleExposure":
			toggleExposure($categoryID, $linkedCategoryID);
			break;
			
		case "deleteCategoryFeature":
			deleteCategoryFeature($featureID);
			break;
			
		case "updateCategoryFeature":
			updateCategoryFeature($featureID, $categoryID, $feature);
			break;
			
		case "getCategoryFeatureEdit":
			getCategoryFeatureEdit($featureID, $categoryID, $featureType);
			break;
			
		case "getCategoryFeatures":
			getCategoryFeatures($categoryID);
			break;
			
		case "updateCategory":
			updateCategory($categoryID, $cat);
			break;
			
		case "getCategoryEdit":
			getCategoryEdit($categoryID);
			break;
			
		case "getCategories":
			getCategories($paging, $sortData, $filterColumns, $customColumns);
			break;
			
		default:
			die("Unauthorized");
	}
	
function getCategories($paging, $sortData, $filterColumns, $customColumns)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	try
	{
		if (!$g_sec->is(permissions::$manage_category_types) && !$g_sec->is(permissions::$modify_category_type)) $g_sec->security_error_a();		
		
		$t = new tblBuilder();
		$t->class = "listTable";
		$t->id = "caetgoriesTable";		
		
		$r = $t->addRow();
		$r->addHeader(new tblHeader("Title"));
		$r->addHeader(new tblHeader("Associated Items"));		
		$r->addHeader(new tblHeader("&nbsp;"));
		
		foreach((array)$customColumns as $cFilter)
		{
			if (!strlen($cFilter["value"])) continue;
				
			switch($cFilter["key"])
			{					
				case "status":
					
					$wh[] = "categories.inactive = {$cFilter["value"]}";
					
					break;
			}
		}		
		
		tableFilter::getWhereArray($filterColumns, $wh, $hvArr);
		$whClause = tableFilter::getWhereClause($wh);
		
		$qry = "select categories.id
				from categories	   
				where 1 $whClause
				".tableFilter::getHavingClause($hvArr)."
				order by ".tableFilter::getOrderClause($sortData, "position asc");
		
		$totalCt = $d->qryRow($qry);
		$fQry = $d->qry($qry.tableFilter::getLimitClause($paging));
		
		while($cat = $fQry->fetch_assoc())
		{
			$catObj = new customCategory($cat[id]);			
			
			$itemCt = $d->qryCount("select count(id) from categoryItems where categoryID = $catObj->id");
			
			$mnu = new jqPopupMenu();
			
			if ($catObj->hasAccess($g_sec, permissions::write))
			{
				$ctl = $mnu->addMenuItem("", "Edit Custom Category", "", "ui-icon-pencil");
				$ctl->onclick = "getCategoryEdit({$catObj->id})";
			}
			
			$ctl = $mnu->addMenuItem("", "Category Items", "", "ui-icon-folder-open");
			$ctl->onclick = "getCategoryItemsWin({$catObj->id})";
			
			if ($catObj->hasAccess($g_sec, permissions::delete))
			{
				$ctl = $mnu->addMenuItem("", $catObj->inactive ? "Permanently Delete" : "Deactivate Custom Category", "ui-state-error", "ui-icon-trash");
				$ctl->onclick = "deleteCategory({$catObj->id}, {$catObj->inactive})";
			}			
			
			$r = $t->addRow();
			$r->addCell(new tblCell($catObj->name));
			$r->addCell(new tblCell($itemCt, "", "center"));			
			$r->addCell(new tblCell($mnu, "", "center"));
		}
		
		if (!$totalCt)
		{
			$r = $t->addRow();
			$r->addCell(new tblCell(new phpParagraph("No Custom Categories found"), "strong", "center", 3));
		}
		
		$js->count = $totalCt;
		$js->content = $t->render();
	}
	catch (Exception $ex)
	{
		$eWin = new jqUI_notify($ex);
		$js->error = $eWin->render();
	}
	
	echo $js->render();
	exit(0);
}
function getCategoryEdit($catID)
{
	global $g_sec;

	$d = new DAL(true);
	$js = new json_a();
	
	try
	{	
		$catObj = new customCategory($catID);
			
		if (!$catObj->id) 
		{						
			if (!$g_sec->hasAccess(permissions::$manage_category_types, permissions::insert)) $g_sec->security_error_a();		
		}
		else
		{
			if (!$catObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
			
			$writeAccess = $catObj->hasAccess($g_sec, permissions::write);
		}		
		
		$tabs = new jqUI_tabControl("categoryTabs", 0, "admin/customCategories");
		
		$catWin = new jqUI_dialog("categoryWin", true, 900, "", $catObj->id ? "Modify Custom Category" : "Add new Custom Category");
		$catWin->addClass("configWin");
		$catWin->setOption("autoOpen", true);
		$catWin->fitToViewport();		
		
		// Redactor will not function inside a modal window.
		$catWin->setOption("modal", 0);
		
		$catWin->addCloseButton($catObj->id ? "Close" : "Cancel");
		
		if ($catObj->id)
		{					
			if ($writeAccess)
			{
				$catWin->addButton("Save","function() { updateCategory(); }");
			}
			else
			{
				$js->disabled = 1;
			}
		}
		else
		{
			$catWin->addButton("Add Category","function() { updateCategory(); }");
			
			$msg = "<strong>NOTE:</strong> Some editor features (file and image uploads, etc.), as well as feature field editing, are unavailable 
					until a category has been added.<br /><br />
					Please fill out the basic information, then click the add button to enable all features.";
			
			$catWin->insertControl(new jqUI_dismissableMessage($g_sec, "new_custom_category", $msg));		
		}		
		
		$txtName = new phpTextBox("cat[name]", validation::prepTextForInput($catObj->name), 50, 255);
		$txtName->setLabel("Category Name:");	
	
		$txtDesc = new phpTextArea("cat[description]", $catObj->description, 8, 92, "wysiwyg");	
		$txtDesc->setLabel("Description:");			
	
		$ddlTypes = new phpDDL("cat[sortMode]");
		$ddlTypes->setLabel("Sort Mode:");
		$ddlTypes->selected = $catObj->sortMode;
		$ddlTypes->addListItem(new phpListItem("Position, Ascending", 0));
		$ddlTypes->addListItem(new phpListItem("Added Timestamp Descending", 1));
		$ddlTypes->addListItem(new phpListItem("Item Name (title)", 2));
		
		$cCategory = new phpForm("post", "frmCategory");
		$cCategory->addControl($txtName);		
		$cCategory->addControl($txtDesc);
		$cCategory->addControl($ddlTypes);		
		$cCategory->addControl(new hiddenInput("action", "updateCategory"));
		$cCategory->addControl(new hiddenInput("categoryID", $catObj->id));
		
		$tpDetail = new jqUI_tabPage("category_detail", "Category Detail", "ui-icon-wrench");
		$tpDetail->addControl($cCategory);
		
		$tabs->addTabPage($tpDetail);
		
		$catWin->addControl($tabs);
		
		if ($catObj->id)
		{	
			$tpFeatures = new jqUI_tabPage("category_features", "Category Features", "ui-icon-tag");
			$tpFeatures->addControl(new phpParagraph("Use these to define additional features that will shape the way the category items
										  	are displayed. Note that removing items here <strong>WILL REMOVE</strong>
										  	any associated Feature data in current content items! Modifying the display position
										  	will have no impact on current content data, it is display only.", "", "left"));
			if ($writeAccess)
			{
				$ddlTypes = new phpDDL("featureType");
				$ddlTypes->setLabel("Add a new Feature:");
				$ddlTypes->bindByArray(categoryFeature::$types_array);
			
				$cmdAdd = new jqUI_button("btnAddFeature", "Add Feature", "", "ui-icon-plusthick", true);				
				$cmdAdd->onclick = "getCategoryFeatureEdit(0, {$catObj->id})";
		
				$aForm = new phpForm();
				$aForm->addControl($ddlTypes);
				$aForm->addControl($cmdAdd);
				
				$tpFeatures->addControl($aForm);			
			}			
			
			$dv = new phpDIV();
			$dv->id = "featuresContainer";
			
			$tpFeatures->addControl($dv);
			
			$tabs->addTabPage($tpFeatures);		

			$tpExp = new jqUI_tabPage("category_exposure", "Category Exposure", "ui-icon-extlink");
			$tpExp->addControl(new phpParagraph("Use the interface below to designate which other Custom Categories can use <strong><em>this</em></strong> Custom Category 
												 as a Category Item Link. Any items in the Custom Categories configured below will be able to link 
												 to items in this category.", "", "left"));
			
			$t = new tblBuilder("center", 0, 0, 8);
			$t->class = "listTable hoverTable";
			
			$r = $t->addRow();
			$r->addHeader(new tblHeader("Category"));
			$r->addHeader(new tblHeader("Linked"));
			
			$qry = "select id, name
					from categories
					where inactive = 0 and id <> {$catObj->id}
					order by position asc";
			$cQry = $d->qry($qry);
			
			$ct = 0;
			while($cat = $cQry->fetch_assoc())
			{
				$expID = $catObj->isExposed($cat["id"]);
				
				$chk = new phpCheckbox("expose_{$cat["id"]}", 1, $expID);
				$chk->class = "exp";
					
				if ($writeAccess)
				{
					$chk->onclick = "toggleExposure({$catObj->id}, {$cat["id"]})";
				}	
				
				$r = $t->addRow();
				$r->addCell(new tblCell($cat["name"], "strong", "left"));
				$r->addCell(new tblCell($chk, "", "center"));
				
				$ct++;
			}		
			
			if (!$ct)
			{
				$r = $t->addRow();
				$r->addCell(new tblCell("No additional Custom Categories found", "strong", "center", 2));
			}
			
			$tpExp->addControl($t);
			
			$tabs->addTabPage($tpExp);
		}
 
		// use addObject so that the strip format parameter can be set
		$js->addObject("content", $catWin->render(), false);
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function updateCategory($catID, $cat)
{
	global $g_sec;

	$js = new json_a();
	
	try
	{	
		$catObj = new customCategory($catID);
			
		if (!$catObj->id) 
		{						
			if (!$g_sec->hasAccess(permissions::$manage_custom_forms, permissions::insert)) $g_sec->security_error_a();
		
		}
		else
		{
			if (!$catObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();	
		}
		
		if (!$cat["name"]) throw new Exception("Error, no Category Name specified. All Custom Categories must have a title!");		
		
		if ($catObj->id)
		{
			$catObj->save($cat);
			pageClass::setNotify("Custom Category Saved");
		}
		else
		{
			$catID = $catObj->insert($cat);
			pageClass::setNotify("Successfully added new Custom Category");
			
			$js->catID = $catID;
		}		
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function deleteCategory($catID)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	$pc = new pageContent();

	try
	{		
		$catObj = new customCategory($catID);
		if (!$catObj->id) throw new Exception("Error, that Custom Category could not be found.");	
			
		if (!$g_sec->hasAccess(permissions::$manage_category_types, permissions::delete)) $g_sec->security_error_a();

		if ($catObj->inactive)
		{
			$catObj->delete();
			pageClass::setNotify("Successfully deleted Custom Category and all Category Items");
		}
		else
		{
			$catObj->inactive = 1;			
			$catObj->save();
			
			pageClass::setNotify("Successfully Deactivated Custom Category");
		}		
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function getCategoryFeatures($catID)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	$pc = new pageContent();

	try
	{
		$catObj = new customCategory($catID);
		if (!$catObj->id) throw new Exception("Error, that Custom Category could not be found.");
	
		if (!$catObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
		
		$writeAccess = $catObj->hasAccess($g_sec, permissions::write);
		
		$t = new tblBuilder('center',0,0,4,'100%');	
		$t->id = "featuresTable";
		$t->class = "listTable sortable";			
		$t->addAttribute("data-sort-type", tableSorter_core::$sort_category_feature["sortType"]);
			
		$r = $t->addRow();
	
		$r->addHeader(new tblHeader("Feature Name"));	
		$r->addHeader(new tblHeader("Type"));		
		if ($writeAccess) $r->addHeader(new tblHeader("&nbsp;"));
	
		$features = $catObj->features;
		
		foreach($features as $feature)
		{				
			$r = $t->addRow();
			$r->addAttribute("data-id", $feature->id);
		
			$c = new tblCell($feature->fieldName, "", "left");
			if ($feature->featureKey) $c->addControl(new phpSpan("Feature Key: {$feature->featureKey}", "featureKey"));
		
			$r->addCell($c);
			$r->addCell(new tblCell($feature->type, "", "left"));
			
			if ($writeAccess)
			{
				$eCtl = new editControl();
				$eCtl->onclick = "getCategoryFeatureEdit({$feature->id})";
						
				$dCtl = new deleteControl();
				$dCtl->onclick = "deleteCategoryFeature({$feature->id})";
				
				$r->addCell(new tblCell(array($eCtl, $dCtl), "", "center"));
			}
		}	
		
		if (!count($features))
		{
			$r = $t->addRow();		
			$r->addCell(new tblCell("No Category Features Defined", "strong", "center", 3));
		}
	
		$pc->addControl($t);
				
		$js->content = $pc->render();	
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}
	
	echo $js->render();
}
function getCategoryFeatureEdit($featureID, $categoryID, $featureType)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	$pc = new pageContent();

	try
	{
		validation::ensureInt($categoryID);
		validation::ensureInt($featureType);
		
		$fObj = new categoryFeature($featureID);
		
		if ($fObj->id)
		{
			$categoryID = $fObj->categoryID;
			$featureType = $fObj->featureType; 	
		}	
		else
		{
			if (!$featureType) throw new Exception("Error, no feature type specified for field addition.");
		}
		
		$catObj = new customCategory($categoryID);
		if (!$catObj->id) throw new Exception("Error, that Custom Category could not be found");		

		if (!$catObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();		
		
		$fWin = new jqUI_dialog("featureEditWin", true, 675, "", $fObj->id ? "Modify Category Feature: {$fObj->fieldName}" : "Add new Category Feature");
		$fWin->addClass("configWin");
		$fWin->setOption("autoOpen", 1);		
		$fWin->setOption("autoResize", 1);
		$fWin->addCloseButton($fObj->id ? "Close" : "Cancel");
		
		$fWin->addButton($fObj->id ? "Save Feature" : "Add Feature", "updateCategoryFeature");
				
		$fType = array_search($featureType, categoryFeature::$types_array);
		$fSpan = new phpSpan($fType, "label featureLabel");	
	
		$featureData = new phpFiller();
		
		switch($featureType)
		{
			case 1:
			case 5:
				$fSpan = new phpDDL("feature[featureType]");				
				$fSpan->selected = $featureType;
				$fSpan->addListItem(new phpListItem("TextBox", 1));
				$fSpan->addListItem(new phpListItem("WYSYWYG Text", 5));							
			
				break;			
			case 2:			
				$featureData = new phpDDL("feature[featureConfigData]");
				$featureData->selected = $fObj->featureConfigData;				
				$featureData->setLabel("Open Link in:");
				$featureData->addListItem(new phpListItem("Same Window", ''));
				$featureData->addListItem(new phpListItem("New Window", "target::_blank"));
				
				break;	
			case 4:
				$featureData = new phpCheckbox("feature[featureConfigData]", 1, $fObj->featureConfigData);				
				$featureData->setLabel("Allow Multiple Files:");
				
				break;			
		}	
		
		$txtName = new phpTextBox("feature[fieldName]", validation::prepTextForInput($fObj->fieldName), 25, 50);	
		$txtName->setLabel("Feature Name:");						
	
		$txtKey = new phpTextBox("feature[featureKey]", $fObj->featureKey, 25, 50);	
		$txtKey->setLabel("Feature Key:");				
		$txtKey->setRequired("Used for accessing feature programmatically", "desc");		
	
		$chkRequired = new phpCheckbox("feature[featureRequired]", 1, $fObj->featureRequired);		
		$chkRequired->setLabel("Required Field:");
		$chkRequired->setRequired("Data required to save Category Item", "desc");			
	
		$fForm = new phpForm("post", "frmFeature");		
		$fForm->addControl(new phpSpan("Feature Type: ", "label"));	
		$fForm->addControl($fSpan);
		$fForm->addControl($txtName);
		$fForm->addControl($featureData);
		$fForm->addControl($txtKey);
		$fForm->addControl($chkRequired);
		$fForm->addControl(new hiddenInput("action", "updateCategoryFeature"));
		$fForm->addControl(new hiddenInput("categoryID", $categoryID));
		$fForm->addControl(new hiddenInput("featureID", $fObj->id));
		if (!$fObj->id) $fForm->addControl(new hiddenInput("feature[featureType]", $featureType));
		
		$fWin->addControl($fForm);
		
		$js->content = $fWin->render();
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}
	
	echo $js->render();	
}
function updateCategoryFeature($featureID, $categoryID, $feature)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	$pc = new pageContent();

	try
	{		
		validation::ensureInt($categoryID);		
		validation::ensureInt($feature["featureRequired"], 0);		
		validation::ensureInt($feature["featureType"]);
		
		$fObj = new categoryFeature($featureID);
		
		if ($fObj->id)
		{
			$categoryID = $fObj->categoryID;
			$featureType = $fObj->featureType;

			unset($feature["featureType"]);
		}	
		else
		{
			if (!$feature["featureType"]) throw new Exception("Error, no feature type specified for field addition.");
		}
		
		$catObj = new customCategory($categoryID);
		if (!$catObj->id) throw new Exception("Error, that Custom Category could not be found");		

		if (!$catObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();		
		
		if (!$feature["fieldName"]) throw new Exception("Feature Field Name cannot be blank!");
		
		$fKey = strtolower(preg_replace(array("/\s/i", "/[^a-z_]/i"), array("_",""), $feature["featureKey"] ? $feature["featureKey"] : $feature["fieldName"]));
		
		if ($d->qryCount("select id 
						 from categoryFeatures 
						 where categoryID={$catObj->id} and featureKey='$fKey'".($fObj->id ? " and id <> {$fObj->id}" : ""))) throw new Exception("A feature with that key name already exists in this category. Please change to something different and try again.");
		
		$fObj->featureKey = "'".$fKey."'";
		
		unset($feature["featureKey"]);
		
		if ($fObj->id)
		{
			$fObj->save($feature);
			pageClass::setNotify("Successfully modified Category Feature");
		}
		else
		{
			$fObj->categoryID = $categoryID;

			$featureID = $fObj->insert($feature);
			pageClass::setNotify("Successfully added new Category Feature");
		}

		$js->categoryID = $catObj->id;
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}
	
	echo $js->render();
	exit(0);
}
function deleteCategoryFeature($featureID)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	$pc = new pageContent();

	try
	{	
		$fObj = new categoryFeature($featureID);
		if (!$fObj->id) throw new Exception("Error, that category feature could not be found!");

		$catObj = $fObj->category;
		
		$js->categoryID = $catObj->id;
		
		if (!$catObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();

		$fObj->delete();
	
		pageClass::setNotify("Successfully deleted Category Feature");
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}
	
	echo $js->render();	
}
function toggleExposure($catID, $linkedCatID)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	$pc = new pageContent();

	try
	{		
		$catObj = new customCategory($catID);
		if (!$catObj->id) throw new Exception("Error, that Custom Category could not be found.");	
			
		if (!$catObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();

		$catObj->toggleExposure($linkedCatID);
		
		pageClass::setNotify("Successfully toggled Custom Category Exposure");		
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function getCategoryItemsWin($categoryID)
{
	global $g_sec;

	$js = new json_a();
	
	try
	{	
		$catObj = new customCategory($categoryID);
		if (!$catObj->id) throw new Exception("Error, no Custom Category specified.");
		
		if (!$catObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();	
		
		$itemsWin = new jqUI_dialog("itemsWin", true, 900, "", "View Category Items: {$catObj->name}");
		$itemsWin->addClass("configWin");
		$itemsWin->setOption("autoOpen", true);
		$itemsWin->fitToViewport();
		
		$itemsWin->addCloseButton("Close");
		
		if ($catObj->hasAccess($g_sec, permissions::insert)) $itemsWin->addButton("Add new Category Item", "function() { getCategoryItemEdit(0, {$catObj->id}); }");
		
		$tblFilter = new tableFilter("itemsFilter", "#itemsTable", "function() { getCategoryItems({$catObj->id}); }");					
		$tblFilter->setPaging(25);	
	
		$tblFilter->addCustomFilter("status", tableFilter::filter_dropdown, "Status:", array("Active"=>0, "Inactive"=>1));	
		
		$dv = new phpDIV();
		$dv->id = "itemsDiv";
		
		$itemsWin->addControl($tblFilter);
		$itemsWin->addControl($dv);

		$js->content = $itemsWin->render();
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function getCategoryItems($categoryID, $paging, $sortData, $filterColumns, $customColumns)
{
	global $g_sec;
	
	$d = new DAL(true);
	$js = new json_a();
	
	try
	{
		$catObj = new customCategory($categoryID);
		if (!$catObj->id) throw new Exception("Error, no Custom Category specified.");
		
		if (!$catObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();		
		
		$writeAccess = $catObj->hasAccess($g_sec, permissions::write);
		
		$t = new tblBuilder();
		$t->class = "listTable";
		$t->id = "itemsTable";		
		
		$r = $t->addRow();
		$r->addHeader(new tblHeader("Title"));		
		$r->addHeader(new tblHeader("Date Added"));
		$r->addHeader(new tblHeader("Last Updated"));
		$r->addHeader(new tblHeader("&nbsp;"));
		
		foreach((array)$customColumns as $cFilter)
		{
			if (!strlen($cFilter["value"])) continue;
				
			switch($cFilter["key"])
			{					
				case "status":
					
					$wh[] = "categoryItems.inactive = {$cFilter["value"]}";
					
					break;
			}
		}		
		
		tableFilter::getWhereArray($filterColumns, $wh, $hvArr);
		$whClause = tableFilter::getWhereClause($wh);
		
		$qry = "select categoryItems.id
				from categoryItems   
				where 1 $whClause
				".tableFilter::getHavingClause($hvArr)."
				order by ".tableFilter::getOrderClause($sortData, "title asc");
		
		$totalCt = $d->qryRow($qry);
		$fQry = $d->qry($qry.tableFilter::getLimitClause($paging));
		
		while($itm = $fQry->fetch_assoc())
		{
			$itemObj = new categoryItem($itm["id"]);
			
			$eCtl = new editControl();
			$eCtl->onclick = "getCategoryItemEdit({$itemObj->id})";
			
			if ($writeAccess)
			{
				$dCtl = new deleteControl();
				$dCtl->onclick = "deleteCategoryItem({$itemObj->id})";
			}
			else
			{
				$dCtl = new phpFiller();
			}
			
			$sec = new security($itemObj->updatedUserID);			
			
			$uDisp[] = new phpSpan(validation::parseMySqlDate($itemObj->updatedDateTime, "m-d-y \a\\t H:i"));			
			$uDisp[] = new phpSpan($sec->login, "updatedBy");
			
			$r = $t->addRow();
			$r->addCell(new tblCell($itemObj->title));
			$r->addCell(new tblCell(validation::parseMySqlDate($itemObj->addedDateTime, "m-d-Y"), "", "center"));
			$r->addCell(new tblCell($uDisp, "", "center"));
			$r->addCell(new tblCell(array($eCtl, $dCtl), "", "center"));
		}
		
		if (!$totalCt)
		{
			$r = $t->addRow();
			$r->addCell(new tblCell(new phpParagraph("No Category Items found"), "strong", "center", 4));
		}
		
		$js->count = $totalCt;
		$js->content = $t->render();
	}
	catch (Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}
	
	echo $js->render();
	exit(0);
}
function getCategoryItemEdit($itemID, $catID)
{
	global $g_sec;

	$d = new DAL(true);
	$js = new json_a();
	
	try
	{	
		$itemObj = new categoryItem($itemID);		
			
		if (!$itemObj->id) 
		{						
			$catObj = new customCategory($catID);
			if (!$catObj->id) throw new Exception("Error, no custom category specified.");
			
			if (!$catObj->hasAccess($g_sec, permissions::insert)) $g_sec->security_error_a();		
		}
		else
		{
			$catObj = $itemObj->category;
			
			if (!$itemObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
			
			$writeAccess = $itemObj->hasAccess($g_sec, permissions::write);
		}		
		
		$tabs = new jqUI_tabControl("itemTabs", 0, "admin/customCategories");
		
		$itemWin = new jqUI_dialog("itemWin", true, 925, "", $itemObj->id ? "Modify Category Item" : "Add new Category Item");
		$itemWin->addClass("configWin");
		$itemWin->setOption("autoOpen", true);				
		
		// Redactor will not function inside a modal window.
		$itemWin->setOption("modal", 0);
		
		$itemWin->addCloseButton($itemObj->id ? "Close" : "Cancel");
		
		if ($itemObj->id)
		{
			$itemWin->fitToViewport();			
								
			if ($writeAccess)
			{
				$itemWin->addButton("Save","function() { updateCategoryItem(); }");
			}
			else
			{
				$js->disabled = 1;
			}
		}
		else
		{
			$itemWin->setOption("autoResize", true);
			$itemWin->addButton("Add Category Item","function() { updateCategoryItem(); }");
			
			$msg = "<strong>NOTE:</strong> Some editor features (file and image uploads, etc.), as well as feature field editing, are unavailable 
					until a category item has been added.<br /><br />
					Please fill out the basic information, then click the add button to enable all features.";
			
			$itemWin->insertControl(new jqUI_dismissableMessage($g_sec, "new_custom_category_item", $msg));		
		}		
		
		$txtTitle = new phpTextBox("item[title]", validation::prepTextForInput($itemObj->title), 50, 255);
		$txtTitle->setLabel("Title:");	
	
		$txtDesc = new phpTextArea("item[description]", $itemObj->description, 8, 92, "wysiwyg");	
		$txtDesc->setLabel("Description:");	
		
		$frmItem = new phpForm("post", "frmItem");
		$frmItem->addControl($txtTitle);		
		$frmItem->addControl($txtDesc);				
		$frmItem->addControl(new hiddenInput("action", "updateCategoryItem"));
		$frmItem->addControl(new hiddenInput("categoryID", $catObj->id));
		$frmItem->addControl(new hiddenInput("itemID", $itemObj->id));
		
		$tpDetail = new jqUI_tabPage("item_detail", "Basic Item Detail", "ui-icon-wrench");
		$tpDetail->addControl($frmItem);
		
		$tabs->addTabPage($tpDetail);
		
		if ($itemObj->id)
		{
			$features = $catObj->features;
			$featureData = $itemObj->featureData;
			
			$featureImages = array();
			$featureFiles = array();
			$featureBlogs = array();
			
			foreach($features as $feature)				
			{
				$dataObj = $featureData[$feature->featureKey];		
				 
				$fs = new phpFormFieldset($feature->fieldName."&nbsp;<span class='featureType'>({$feature->type})</span>");				
			
				switch($feature->featureType)
				{
					case 1:
						$txtValue = new phpTextBox("features[{$feature->id}]", validation::prepTextForInput($dataObj->value), 86, 255);
						$txtValue->setLabel("Value:");
						
						$fs->addControl($txtValue);
						
						break;			
					case 2:
						$txtExtra = new phpTextBox("extra[{$feature->id}]", validation::prepTextForInput($dataObj->value), 86, 255);
						$txtExtra->setLabel("Link Display:");					
			
						$txtData = new phpTextBox("features[{$feature->id}]", validation::prepTextForInput($dataObj->additionalData), 86, 255, 'textBox floating');
						$txtData->setLabel("Link URL:");
				
						$fs->addControl($txtExtra);
						$fs->addControl($txtData);
			
						break;			
					case 3:
						$featureImages[] = $feature;
						continue 2;						
					
					case 4:
						$featureFiles[] = $feature;
						continue 2;
					
					case 5:
						$txtExtra = new phpTextArea("features[{$feature->id}]", validation::prepTextForInput($dataObj->value), 10, 98, "wysiwyg");
						$fs->addControl($txtExtra);
						
						break;
					case 6:
						$ddlShowcases = new phpDDL("features[{$feature->id}]");
						$ddlShowcases->selected = $dataObj->value;
						$ddlShowcases->setLabel("Choose Showcase: ");
						$ddlShowcases->addListItem(new phpListItem("",""));
						$ddlShowcases->bind($d->qry("select id, name from showcase order by name asc"), "id", "name");
						$ddlShowcases->onchange = "getFeatureContextMenu.call(this, {$feature->id})";

						$fs->addControl($ddlShowcases);					
						$fs->addControl(new phpDIV("", "contextMenu"));
						$fs->addControl(new jqLoader("$(\"[name='{$ddlShowcases->id}']\").change();"));					
												
						break;					
					case 7:						
						$dtVal = new jqUI_datepicker("features[{$feature->id}]", validation::prepTextForInput($dataObj->value), "Date Value:", true, "null", "mm/dd/yy");
						
						$fs->addControl($dtVal);
						
						break;						
					case 8:
						$txtExtra = new phpTextArea("features[{$feature->id}]", validation::prepTextForInput($dataObj->value), 3, 84);						
						$txtExtra->setLabel("HTML Literal:");
						
						$fs->addControl($txtExtra);			
				
						break;
					case 9:						
						$ddlForms = new phpDDL("features[{$feature->id}]");
						$ddlForms->selected = $dataObj->value;
						$ddlForms->setLabel("Choose Custom Form: ");
						$ddlForms->addListItem(new phpListItem("",""));
						$ddlForms->bind($d->qry("select id, title from customForms order by title asc"), "id", "title");
						$ddlForms->onchange = "getFeatureContextMenu.call(this, {$feature->id})";

						$fs->addControl($ddlForms);					
						$fs->addControl(new phpDIV("", "contextMenu"));
						$fs->addControl(new jqLoader("$(\"[name='{$ddlForms->id}']\").change();"));
					
						break;
					case 10:
					case 11:
						$featureBlogs[] = $feature;
						continue 2;								
				}
				
				$frmItem->addControl($fs);
			}
			
	 		if (count($featureImages))
			{
				$tpImages = new jqUI_tabPage("item_images", "Images", "ui-icon-image");
				
				foreach($featureImages as $feature)
				{
					$fs = new phpFormFieldset($feature->fieldName, "files");
					$fs->id = "imgContainer_".$feature->id;					
					$fs->addControl(new jqLoader("getFeatureImage({$feature->id}, {$itemObj->id})"));
					$fs->addControl(new phpDIV());
					
					$tpImages->addControl($fs);				
				}
				
				$tabs->addTabPage($tpImages);
			}
			
			if (count($featureFiles))
			{
				$tpFiles = new jqUI_tabPage("item_files", "Files", "ui-icon-document");
				
				foreach($featureFiles as $feature)
				{
					$fs = new phpFormFieldset($feature->fieldName, "files");
					$fs->id = "fileContainer_".$feature->id;					
					$fs->addControl(new jqLoader("getFeatureFiles({$feature->id}, {$itemObj->id})"));
					$fs->addControl(new phpDIV());
					
					$tpFiles->addControl($fs);
				}
				
				$tabs->addTabPage($tpFiles);
			}
		}
		
		$itemWin->addControl($tabs);
		
		/* if ($catObj->id)
		{	
			$tpFeatures = new jqUI_tabPage("category_features", "Category Features", "ui-icon-tag");
			$tpFeatures->addControl(new phpParagraph("Use these to define additional features that will shape the way the category items
										  	are displayed. Note that removing items here <strong>WILL REMOVE</strong>
										  	any associated Feature data in current content items! Modifying the display position
										  	will have no impact on current content data, it is display only.", "", "left"));
			if ($writeAccess)
			{
				$ddlTypes = new phpDDL("featureType");
				$ddlTypes->setLabel("Add a new Feature:");
				$ddlTypes->bindByArray(categoryFeature::$types_array);
			
				$cmdAdd = new jqUI_button("btnAddFeature", "Add Feature", "", "ui-icon-plusthick", true);				
				$cmdAdd->onclick = "getCategoryFeatureEdit(0, {$catObj->id})";
		
				$aForm = new phpForm();
				$aForm->addControl($ddlTypes);
				$aForm->addControl($cmdAdd);
				
				$tpFeatures->addControl($aForm);			
			}			
			
			$dv = new phpDIV();
			$dv->id = "featuresContainer";
			
			$tpFeatures->addControl($dv);
			
			$tabs->addTabPage($tpFeatures);			
		} */
 
		// use addObject so that the strip format parameter can be set
		$js->addObject("content", $itemWin->render(), false);
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function updateCategoryItem($itemID, $catID, $item)
{
	global $g_sec;

	$js = new json_a();
	
	try
	{	
		$itemObj = new categoryItem($itemID);		
			
		if (!$itemObj->id) 
		{						
			$catObj = new customCategory($catID);
			if (!$catObj->id) throw new Exception("Error, no custom category specified.");
			
			if (!$catObj->hasAccess($g_sec, permissions::insert)) $g_sec->security_error_a();		
		}
		else
		{
			$catObj = $itemObj->category;
			
			if (!$itemObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();			
		}		
		
		if (!$item["title"]) throw new Exception("Error, no Item Title specified; all Category items must have a title!");		
		
		if ($itemObj->id)
		{
			$itemObj->save($item);
			pageClass::setNotify("Category Item Saved");
		}
		else
		{
			$itemObj->categoryID = $catID;
			$itemObj->updatedDateTime = "now()";
			$itemObj->addedDateTime = "now()";
			
			$itemID = $itemObj->insert($item);
			pageClass::setNotify("Successfully added new Category Item");
			
			$js->itemID = $itemID;
		}		
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();
	exit(0);
}
function getFeatureImage($featureID, $itemID)
{
	global $config, $g_sec;
	
	$js = new json_a();
	
	// Use a div to wrap instead of PageContent to get around the popupIcon hover events staying on the static DIV container when images are cleared
	$pc = new phpDIV();

	try
	{
		$featureObj = new categoryFeature($featureID);
		if (!$featureObj->id) throw new Exception("Error, that feature could not be found!");
		
		$itemObj = new categoryItem($itemID);
		if (!$itemObj->id) throw new Exception("Error, that Category Item could not be found!");
		
		if (!$itemObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();

		$featureData = $itemObj->featureData[$featureObj->featureKey];

		$imgNote = new phpFiller();
		
		if ($featureData->value)
		{	
			$imgLoc = $itemObj->assetFolder."/".$featureData->value;
				
			//Use Query String to get around caching issues on update
			$img = new image($imgLoc."?ts=".time(), "", "featureImage");

			$imgSize = @getimagesize($config["baseAppDir"].$imgLoc);

			if ($imgSize[0] > 850)
			{
				$ratio = $imgSize[1] / $imgSize[0];
				$height = 850 * $ratio;
					
				$img->addAttribute('style', "width: 850px; height: {$height}px;");
					
				$imgNote = new phpSpan("** Image has been resized to fit. Original Dimensions (px): $imgSize[0] x $imgSize[1]", "dimensions resized");				
			}
			else
			{
				$imgNote = new phpSpan("Image Dimensions (px): {$imgSize[0]}x{$imgSize[1]}", "dimensions");	
			}
		}
		else
		{
			$img = new phpSpan("- No image uploaded -", "imageEmpty");
		}

		$pc->addControl($img);
		$pc->addControl($imgNote);

		$dvUpload = new phpDIV();
		$dvUpload->class = 'uploadDiv';

		$btnUpload = new jqUI_button("btnUpload_$featureID", "Upload New Image", '', 'ui-icon-image', true);
		$btnUpload->style = "display: none;";
		$btnUpload->onclick = "return uploadFeatureImage($featureID, $itemID);";

		$fInput = new formInput("fileToUpload_$featureID",'file');
		$fInput->onchange = "$('#btnUpload_$featureID').css('display','block');";
		$fInput->setLabel("Upload a new Image: ");

		$dvUpload->addControl($fInput);
		$dvUpload->addControl($btnUpload);
		//$dvUpload->addControl($btnClear);

		if ($itemObj->hasAccess($g_sec, permissions::write))
		{
			$pc->addControl($dvUpload);
		}

		$js->dataID = $featureData->id;
		$js->content = $pc->render();
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}

	echo $js->render();
	exit(0);
}
function uploadFeatureImage($featureID, $itemID)
{
	global $config, $g_sec;

	$d = new DAL(true);
	$js = new json_a();

	try
	{			
		$featureObj = new categoryFeature($featureID);
		if (!$featureObj->id) throw new Exception("Error, that feature could not be found!");
		
		$itemObj = new categoryItem($itemID);
		if (!$itemObj->id) throw new Exception("Error, that Category Item could not be found!");
		
		if (!$itemObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();
		
		$featureData = $itemObj->featureData[$featureObj->featureKey];		
		if (!$featureData->id) $featureData = new categoryFeatureData();
		
		$baseLoc = $config["baseAppDir"].$itemObj->assetFolder."/";
		
		$u = new upload($_FILES["fileToUpload_".$featureObj->id]);			
			
		$fExt = $u->getFileExtension($u->p_Name);
		$fName = str_replace(".$fExt", "_".time().".$fExt", $u->p_Name);
			
		//Turn whitespaces into _ and everything non-alpha-numeric into nothing
		$fName = preg_replace(array("/\s/","/[^a-zA-Z0-9\.\_]/"), array("_",""), $fName);
		
		$u->uploadFile($baseLoc.$fName);
		
		if ($featureData->value)
		{
			// Clear any existing image after the upload is successful
			$imgLoc = $baseLoc.$featureData->value;
			@unlink($imgLoc);
		}		
		
		$featureData->value = "'$fName'";		
		
		if ($featureData->id)
		{
			$featureData->save();	
		}
		else
		{
			$featureData->categoryFeatureID = $featureObj->id;
			$featureData->categoryItemID = $itemObj->id;
			
			$dataID = $featureData->insert();
		}		
					
		pageClass::setNotify("Successfully uploaded Feature Image");

		// Need *something* in the JS, or the parser freaks out when the upload is done.
		$js->success = 1;
	}
	catch(Exception $ex)
	{
		$js->error = $ex->getMessage();
	}

	echo $js->render();
	exit(0);
}	
function clearFeatureImage($dataID)
{
	global $config, $g_sec;

	$d = new DAL(true);
	$js = new json_a();

	try
	{
		$dataObj = new categoryFeatureData($dataID);
		if (!$dataObj->id) throw new Exception("Error, that feature data could not be found!");
		
		$featureObj = $dataObj->feature;		
		$itemObj = $dataObj->item;
		
		if (!$itemObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();
		
		$baseLoc = $config["baseAppDir"].$itemObj->assetFolder."/";

		$imgLoc = $baseLoc.$dataObj->value;
		@unlink($imgLoc);

		$dataObj->delete();

		$js->featureID = $featureObj->id;
		$js->itemID = $itemObj->id;
		
		pageClass::setNotify("Successfully cleared Feature Image");
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}

	echo $js->render();
	exit(0);
}
function getFeatureContextMenu($featureID, $dataID)
{
	global $config, $g_sec;

	$d = new DAL(true);
	$js = new json_a();

	try
	{
		validation::ensureInt($dataID, 0);
		
		if ($dataID)
		{
			$featureObj = new categoryFeature($featureID);
			if (!$featureObj->id) throw new Exception("Error, that feature could not be found!");
			
			$mnu = new jqPopupMenu();
			
			switch($featureObj->featureType)
			{
				case 6:
					// Custom Showcase
					$obj = new customShowcase($dataID);
					
					if ($obj->hasAccess($g_sec, permissions::read))
					{
						$ctl = $mnu->addMenuItem("", "Manage Images", "", "ui-icon-image");
						$ctl->onClick = "getShowcaseEntriesWin({$obj->id})";
					}
					break;
				case 9:
					// Custom Form
					$obj = new customForm($dataID);

					if ($obj->hasAccess($g_sec, permissions::read))
					{
						$ctl = $mnu->addMenuItem("", "View Submissions", "", "ui-icon-contact");
						$ctl->onClick = "getSubmissionsWin({$obj->id})";
					}
					break;
				default:
					throw new Exception("Invalid feature type specified.");
			}
			if (count($mnu->ul->listItems))
			{
				$js->content = $mnu->render();
			}
			else
			{
				$js->content = "";
			}
		}
		else
		{
			$js->content = "";
		}
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}

	echo $js->render();
	exit(0);
}
function getFeatureFiles($featureID, $itemID)
{
	global $config, $g_sec;	
	
	$js = new json_a();	
	
	$pc = new pageContent();
	
	try
	{
		$featureObj = new categoryFeature($featureID);
		if (!$featureObj->id) throw new Exception("Error, that feature could not be found!");
		
		$itemObj = new categoryItem($itemID);
		if (!$itemObj->id) throw new Exception("Error, that Category Item could not be found!");
		
		if (!$itemObj->hasAccess($g_sec, permissions::read)) $g_sec->security_error_a();
		
		$writeAccess = $itemObj->hasAccess($g_sec, permissions::write);
		
		$featureData = $itemObj->featureData[$featureObj->featureKey];		
		if (!$featureData->id) $featureData = new categoryFeatureData();
		
		$baseLoc = $config["baseAppDir"].$itemObj->assetFolder."/";
		
		$t = new tblBuilder();
		$t->class = "listTable filesTable";
		
		$r = $t->addRow();
		$r->addHeader(new tblHeader("File Caption"));
		$r->addHeader(new tblHeader("Download Link"));
		$r->addHeader(new tblHeader("File Size"));
		if ($writeAccess) $r->addHeader(new tblHeader("&nbsp;"));	
	
		$filesDiv = new phpDIV();

		$files = $featureData->id ? $featureData->files : array();
		
		foreach($files as $file)
		{	
			$fLink = new jqUI_hyperlink($file->filePath, basename($file->filePath), "download", "ui-icon-extlink", true);		
						
			$txtExtra = new phpParagraph($file->caption);		
			$txtExtra->id = "caption_{$featureID}_{$file->index}";
			
			$fSize = number_format(round($file->fileSize / 1048576, 2), 2);
			
			$txtSize = new phpParagraph("<strong>{$fSize}mb</strong>");
			
			if ($writeAccess)
			{
				$dvEdit = new phpDIV();
				$dvEdit->class = "captionEditDiv";
				
				$txtCap = new phpTextBox("edit_{$featureID}_{$file->index}", validation::prepTextForInput($file->caption), 35, 255);
					
				$lnkSave = new jqUI_hyperlink("javascript:void(0)", "&nbsp;", "", "ui-icon-disk");
				$lnkSave->onclick = "updateFileCaption.call(this, {$featureData->id}, '{$file->index}')";
				
				$lnkCancel = new jqUI_hyperlink("javascript:void(0)", "&nbsp;", "", "ui-icon-close");
				$lnkCancel->onclick = "hideCaptionEdit.call(this)";
				
				$dvEdit->addControl($txtCap);
				$dvEdit->addControl($lnkSave);								
				$dvEdit->addControl($lnkCancel);
			}
			else
			{
				$dvEdit = $dCtl = new phpFiller();
			}
			
			$r = $t->addRow();			
			$r->addCell(new tblCell(array($txtExtra, $dvEdit),"strong", "left"));		
			$r->addCell(new tblCell($fLink, "", "left"));		
			$r->addCell(new tblCell($txtSize,"","left"));
			
			if ($writeAccess)
			{	
				$mnu = new jqPopupMenu();
			
				$ctl = $mnu->addMenuItem("", "Edit File Caption", "", "ui-icon-pencil");
				$ctl->onclick = "showCaptionEdit.call(this)";
				
				$ctl = $mnu->addMenuItem("", "Remove File", "ui-state-error", "ui-icon-trash");
				$ctl->onclick = "removeFeatureFile({$featureData->id}, '{$file->index}')";
				
				$r->addCell(new tblCell($mnu, "", "center", "", "1%"));
			}							
		}
	
		if (!count($files))
		{
			$r = $t->addRow();			
			$r->addCell(new tblCell("No Files Uploaded", "strong", "center", 4));
		}
		
		$filesDiv->addControl($t);
	
		$pc->addControl($filesDiv);
	
		if ($writeAccess && (!$fileCount || $featureObj->featureConfigData))
		{		
			$dvUpload = new phpDIV();
			$dvUpload->class = "uploadDiv";
			
			$btnUpload = new jqUI_button("btnUpload_$featureID", "Upload File", "", "ui-icon-extlink", true);
			$btnUpload->style = "display: none;";
			$btnUpload->onclick = "return uploadFeatureFile($featureID, $itemID);"; 			
			
			$fInput = new formInput("fileToUpload_$featureID",'file');	
			$fInput->onchange = "$('#btnUpload_$featureID').show();";
			$fInput->setLabel("Upload a File:");
			
			$dvUpload->addControl($fInput);
			$dvUpload->addControl($btnUpload);

			$pc->addControl($dvUpload);
		}
	
		$js->content = $pc->render();		
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();	
	}
	
	echo $js->render();	
}
function uploadFeatureFile($featureID, $itemID)
{
	global $config, $g_sec;

	$d = new DAL(true);
	$js = new json_a();

	try
	{			
		$featureObj = new categoryFeature($featureID);
		if (!$featureObj->id) throw new Exception("Error, that feature could not be found!");
		
		$itemObj = new categoryItem($itemID);
		if (!$itemObj->id) throw new Exception("Error, that Category Item could not be found!");
		
		if (!$itemObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();
		
		$featureData = $itemObj->featureData[$featureObj->featureKey];		
		if (!$featureData->id) $featureData = new categoryFeatureData();
		
		if ($featureData->id && !$featureObj->featureConfigData) throw new Exception("Error, this feature is not configured to allow multiple file uploads.");
		
		$baseLoc = $config["baseAppDir"].$itemObj->assetFolder."/";
		
		$u = new upload($_FILES["fileToUpload_".$featureObj->id]);			
			
		$fExt = $u->getFileExtension($u->p_Name);
		$fName = str_replace(".$fExt", "_".time().".$fExt", $u->p_Name);
			
		//Turn whitespaces into _ and everything non-alpha-numeric into nothing
		$fName = preg_replace(array("/\s/","/[^a-zA-Z0-9\.\_]/"), array("_",""), $fName);
		
		$defCaption = str_replace("_", " ", $u->p_Name );
		$defCaption = str_replace(".$fExt", "", $defCaption);		
		
		$u->uploadFile($baseLoc.$fName);
		
		if ($featureData->id)
		{
			$featureData->value = "'{$featureData->value}::$fName'";
			$featureData->additionalData = "'{$featureData->additionalData}::$defCaption'";
			
			$featureData->save();	
		}
		else
		{
			$featureData->value = "'$fName'";
			$featureData->additionalData = "'$defCaption'";
			
			$featureData->categoryFeatureID = $featureObj->id;
			$featureData->categoryItemID = $itemObj->id;
			
			$dataID = $featureData->insert();
		}
					
		pageClass::setNotify("Successfully uploaded Feature Image");

		// Need *something* in the JS, or the parser freaks out when the upload is done.
		$js->success = 1;
	}
	catch(Exception $ex)
	{
		$js->error = $ex->getMessage();
	}

	echo $js->render();
	exit(0);
}
function updateFileCaption($dataID, $indexID, $caption)
{
	global $config, $g_sec;
		
	$d = new DAL(true);
	$js = new json_a();

	try
	{		
		if (!strlen($caption)) throw new Exception("Error, no file caption specified.");
		
		validation::ensureInt($indexID, 0);
		
		$dataObj = new categoryFeatureData($dataID);
		if (!$dataObj->id) throw new Exception("Error, no feature data found!");		

		$featureObj = $dataObj->feature;		
		$itemObj = $dataObj->item;
		
		if (!$itemObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();
		
		$fArray = explode("::", $dataObj->value);
		$cArray = explode("::", $dataObj->additionalData);

		$cArray[$indexID] = $caption;

		$dataObj->additionalData = "'".implode("::", (array)$cArray)."'";
		$dataObj->save();
		
		pageClass::setNotify("File Caption Saved");
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}

	echo $js->render();
}
function removeFeatureFile($dataID, $indexID)
{
	global $config, $g_sec;
		
	$d = new DAL(true);
	$js = new json_a();

	try
	{
		$dataObj = new categoryFeatureData($dataID);
		if (!$dataObj->id) throw new Exception("Error, no feature data found!");		

		$featureObj = $dataObj->feature;		
		$itemObj = $dataObj->item;
		
		if (!$itemObj->hasAccess($g_sec, permissions::write)) $g_sec->security_error_a();
		
		$fArray = explode("::", $dataObj->value);
		$cArray = explode("::", $dataObj->additionalData);
		
		$oldFile = $fArray[$indexID];

		@unlink($config["baseAppDir"].$itemObj->assetFolder."/".$oldFile);

		unset($fArray[$indexID]);
		unset($cArray[$indexID]);

		$files = implode("::", (array)$fArray);		

		if ($files == "")
		{
			$dataObj->delete();
		}
		else
		{
			$captions = implode("::", (array)$cArray);
			
			$dataObj->value = "'$files'";
			$dataObj->additionalData = "'$captions'";
			
			$dataObj->save();
		}

		pageClass::setNotify("Successfully removed File");

		$js->featureID = $featureObj->id;
		$js->itemID = $itemObj->id;
	}
	catch(Exception $ex)
	{
		$eWin = new jqUI_errorNotify($ex);
		$js->error = $eWin->render();
	}

	echo $js->render();
}
?>